Data structures: I am only looking at the worst time complexity here
                    Access      Search      Insertion       Deletion            Space Complexity
Array               O(1)        O(n)        O(n)            O(n)                O(n)
Stack               O(n)        O(n)        O(1)            O(1)                ...
Queue               O(n)        O(n)        O(1)            O(1)                ...
Singly-Linked List  O(n)        O(n)        O(1)            O(1)                ...
Doubly-Linked List  O(n)        O(n)        O(1)            O(1)                ...
Skip List           O(n)        O(n)        O(n)            O(n)                O(n*log(n))
Hash Table          N/A         O(n)        O(n)            O(n)                O(n)
Binary Search Tree  O(n)        O(n)        O(n)            O(n)                ...
Cartesian Tree      N/A         O(n)        O(n)            O(n)                ...
B-Tree              O(log(n))   O(log(n))   O(log(n))       O(log(n))           ...
Red-Black Tree      O(log(n))   O(log(n))   O(log(n))       O(log(n))           ...
Splay Tree          N/A         O(log(n))   O(log(n))       O(log(n))           ...
AVL Tree            O(log(n))   O(log(n))   O(log(n))       O(log(n))           ...
KD Tree             O(n)        O(n)        O(n)            O(n)                ...


Sorting algorithms:
    Time complexity:
                        Best                Average                 Worst

    Quicksort           omega(n*log(n))     theta(n*log(n))         O(n^2)
    Mergesort           omega(n*log(n))     theta(n*log(n))         O(n*log(n))
    Heapsort            omega(n)            theta(n*log(n))         O(n*log(n))
    Bubble Sort         omega(n*log(n))     theta(n*log(n))         O(n*log(n))
    Insertion Sort      omega(n)            theta(n^2)              O(n^2)
    Selection Sort      omega(n^2)          theta(n^2)              O(n^2)
    Tree Sort           omega(n*log(n))     theta(n*log(n))         O(n^2)